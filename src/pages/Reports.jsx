import React, { useState, useEffect } from "react";
import { SmartBin } from "@/api/entities";
import { Compartment } from "@/api/entities";
import { User } from "@/api/entities";
import { motion } from "framer-motion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { 
  FileText, 
  Download, 
  Calendar,
  BarChart3,
  Leaf,
  TrendingUp,
  Filter,
  Settings
} from "lucide-react";
import { format } from "date-fns";

const reportTypes = [
  {
    id: 'smartbin-historical',
    title: 'SmartBin Historical Data',
    description: 'Individual SmartBin sensor data over time',
    icon: BarChart3,
    color: 'text-blue-600',
    smartBinFields: ['temperature', 'humidity', 'air_quality', 'battery_level'],
    compartmentFields: ['fill_level', 'weight', 'odour_level', 'lid_open']
  },
  {
    id: 'waste-quantity',
    title: 'Waste Quantity Analysis',
    description: 'Total waste generated by type and time period',
    icon: TrendingUp,
    color: 'text-green-600',
    smartBinFields: [],
    compartmentFields: [],
    wasteTypeFields: ['recyclable', 'non_recyclable', 'organic', 'compost', 'food_waste']
  },
  {
    id: 'esg-report',
    title: 'ESG Sustainability Report',
    description: 'Environmental impact and sustainability metrics',
    icon: Leaf,
    color: 'text-emerald-600',
    smartBinFields: ['air_quality'],
    compartmentFields: ['fill_level', 'weight']
  },
  {
    id: 'efficiency-analysis',
    title: 'Operational Efficiency',
    description: 'Collection efficiency and optimization insights',
    icon: Settings,
    color: 'text-purple-600',
    smartBinFields: ['battery_level'],
    compartmentFields: ['fill_level', 'lid_open']
  }
];

const timeRanges = [
  { value: '1M', label: '1 Month' },
  { value: '3M', label: '3 Months' },
  { value: '6M', label: '6 Months' },
  { value: '1Y', label: '1 Year' },
  { value: 'custom', label: 'Custom Range' }
];

export default function Reports() {
  const [smartBins, setSmartBins] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedReport, setSelectedReport] = useState(null);
  const [reportConfig, setReportConfig] = useState({
    timeRange: '1M',
    startDate: '',
    endDate: '',
    selectedBins: [],
    selectedSmartBinFields: [],
    selectedCompartmentFields: [],
    selectedWasteTypes: [],
    format: 'pdf'
  });

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      const user = await User.me();
      const smartBinData = await SmartBin.filter({ created_by: user.email });
      setSmartBins(smartBinData);
    } catch (error) {
      console.error("Error loading data:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleReportSelect = (report) => {
    setSelectedReport(report);
    setReportConfig(prev => ({
      ...prev,
      selectedSmartBinFields: report.smartBinFields || [],
      selectedCompartmentFields: report.compartmentFields || [],
      selectedWasteTypes: report.wasteTypeFields || [],
      selectedBins: smartBins.map(bin => bin.id)
    }));
  };

  const handleSmartBinFieldToggle = (field, checked) => {
    setReportConfig(prev => ({
      ...prev,
      selectedSmartBinFields: checked 
        ? [...prev.selectedSmartBinFields, field]
        : prev.selectedSmartBinFields.filter(f => f !== field)
    }));
  };

  const handleCompartmentFieldToggle = (field, checked) => {
    setReportConfig(prev => ({
      ...prev,
      selectedCompartmentFields: checked 
        ? [...prev.selectedCompartmentFields, field]
        : prev.selectedCompartmentFields.filter(f => f !== field)
    }));
  };

  const handleWasteTypeToggle = (type, checked) => {
    setReportConfig(prev => ({
      ...prev,
      selectedWasteTypes: checked 
        ? [...prev.selectedWasteTypes, type]
        : prev.selectedWasteTypes.filter(t => t !== type)
    }));
  };

  const handleBinToggle = (binId, checked) => {
    setReportConfig(prev => ({
      ...prev,
      selectedBins: checked
        ? [...prev.selectedBins, binId]
        : prev.selectedBins.filter(id => id !== binId)
    }));
  };

  const generateReport = async () => {
    console.log('Generating report:', selectedReport.id, reportConfig);
    
    const reportData = {
      type: selectedReport.id,
      config: reportConfig,
      timestamp: new Date().toISOString(),
      bins: smartBins.filter(bin => reportConfig.selectedBins.includes(bin.id))
    };

    const blob = new Blob([JSON.stringify(reportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${selectedReport.id}-report-${format(new Date(), 'yyyy-MM-dd')}.json`;
    a.click();
    URL.revokeObjectURL(url);
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-96">
        <div className="text-center">
          <FileText className="w-12 h-12 text-purple-600 mx-auto mb-4" />
          <p className="text-gray-600 dark:text-gray-300">Loading reports...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="mb-8"
      >
        <h1 className="text-3xl font-bold text-gray-900 dark:text-purple-100">Reports & Analytics</h1>
        <p className="text-gray-600 dark:text-purple-200 mt-1">Generate comprehensive reports and insights</p>
      </motion.div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Report Types */}
        <div className="lg:col-span-1">
          <Card className="dark:bg-[#2A1F3D] dark:border-purple-600">
            <CardHeader>
              <CardTitle className="dark:text-purple-100">Available Reports</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {reportTypes.map((report, index) => (
                <motion.div
                  key={report.id}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className={`p-4 rounded-lg border-2 cursor-pointer transition-all duration-300 ${
                    selectedReport?.id === report.id
                      ? 'border-purple-500 bg-purple-50 dark:bg-purple-900/40 dark:border-purple-400 shadow-md'
                      : 'border-gray-200 dark:border-purple-600/50 bg-white dark:bg-[#1F0F2E]/60 hover:border-purple-300'
                  }`}
                  onClick={() => handleReportSelect(report)}
                >
                  <div className="flex items-start gap-3">
                    <report.icon className={`w-6 h-6 ${report.color} mt-1`} />
                    <div>
                      <h3 className="font-semibold text-gray-900 dark:text-purple-100">{report.title}</h3>
                      <p className="text-sm text-gray-500 dark:text-purple-200 mt-1">{report.description}</p>
                    </div>
                  </div>
                </motion.div>
              ))}
            </CardContent>
          </Card>
        </div>

        {/* Report Configuration */}
        <div className="lg:col-span-2">
          {selectedReport ? (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="space-y-6"
            >
              <Card className="dark:bg-[#2A1F3D] dark:border-purple-600">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2 dark:text-purple-100">
                    <selectedReport.icon className={`w-5 h-5 ${selectedReport.color}`} />
                    {selectedReport.title} Configuration
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-6">
                  {/* Time Range */}
                  <div>
                    <Label className="text-base font-medium dark:text-purple-100">Time Range</Label>
                    <div className="grid grid-cols-2 md:grid-cols-5 gap-2 mt-2">
                      {timeRanges.map((range) => (
                        <Button
                          key={range.value}
                          variant={reportConfig.timeRange === range.value ? "default" : "outline"}
                          size="sm"
                          onClick={() => setReportConfig(prev => ({ ...prev, timeRange: range.value }))}
                          className={`${reportConfig.timeRange === range.value 
                            ? 'bg-purple-600 hover:bg-purple-700' 
                            : 'dark:border-purple-500 dark:text-purple-200 dark:hover:bg-purple-600/20'
                          }`}
                        >
                          {range.label}
                        </Button>
                      ))}
                    </div>
                    
                    {reportConfig.timeRange === 'custom' && (
                      <div className="grid grid-cols-2 gap-4 mt-4">
                        <div>
                          <Label className="dark:text-purple-100">Start Date</Label>
                          <Input
                            type="date"
                            value={reportConfig.startDate}
                            onChange={(e) => setReportConfig(prev => ({ ...prev, startDate: e.target.value }))}
                            className="dark:bg-[#1F0F2E] dark:border-purple-500 dark:text-purple-100"
                          />
                        </div>
                        <div>
                          <Label className="dark:text-purple-100">End Date</Label>
                          <Input
                            type="date"
                            value={reportConfig.endDate}
                            onChange={(e) => setReportConfig(prev => ({ ...prev, endDate: e.target.value }))}
                            className="dark:bg-[#1F0F2E] dark:border-purple-500 dark:text-purple-100"
                          />
                        </div>
                      </div>
                    )}
                  </div>

                  {/* SmartBin Selection */}
                  <div>
                    <Label className="text-base font-medium dark:text-purple-100">Select SmartBins</Label>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2 max-h-40 overflow-y-auto">
                      {smartBins.map((bin) => (
                        <motion.div
                          key={bin.id}
                          className={`flex items-center space-x-2 p-2 rounded-lg cursor-pointer transition-colors ${
                            reportConfig.selectedBins.includes(bin.id)
                              ? 'bg-purple-100 dark:bg-purple-800/40'
                              : 'hover:bg-gray-50 dark:hover:bg-purple-900/20'
                          }`}
                          onClick={() => handleBinToggle(bin.id, !reportConfig.selectedBins.includes(bin.id))}
                        >
                          <Checkbox
                            checked={reportConfig.selectedBins.includes(bin.id)}
                            onCheckedChange={(checked) => handleBinToggle(bin.id, checked)}
                            className="data-[state=checked]:bg-green-600 data-[state=checked]:border-green-600"
                          />
                          <label className="text-sm text-gray-700 dark:text-purple-200 cursor-pointer">
                            {bin.name} {bin.location && `(${bin.location})`}
                          </label>
                        </motion.div>
                      ))}
                    </div>
                  </div>

                  {/* SmartBin Level Parameters */}
                  {selectedReport.smartBinFields && selectedReport.smartBinFields.length > 0 && (
                    <div>
                      <Label className="text-base font-medium dark:text-purple-100">SmartBin Level Parameters</Label>
                      <p className="text-xs text-gray-500 dark:text-purple-300 mb-2">Sensors at SmartBin level (Temperature, Humidity, Air Quality, Battery Level)</p>
                      <div className="grid grid-cols-2 md:grid-cols-3 gap-2 mt-2">
                        {selectedReport.smartBinFields.map((field) => (
                          <motion.div
                            key={field}
                            className={`flex items-center space-x-2 p-2 rounded-lg cursor-pointer transition-colors ${
                              reportConfig.selectedSmartBinFields.includes(field)
                                ? 'bg-indigo-100 dark:bg-indigo-800/40'
                                : 'hover:bg-gray-50 dark:hover:bg-purple-900/20'
                            }`}
                            onClick={() => handleSmartBinFieldToggle(field, !reportConfig.selectedSmartBinFields.includes(field))}
                          >
                            <Checkbox
                              checked={reportConfig.selectedSmartBinFields.includes(field)}
                              onCheckedChange={(checked) => handleSmartBinFieldToggle(field, checked)}
                              className="data-[state=checked]:bg-green-600 data-[state=checked]:border-green-600"
                            />
                            <label className="text-sm text-gray-700 dark:text-purple-200 cursor-pointer capitalize">
                              {field.replace('_', ' ')}
                            </label>
                          </motion.div>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Compartment Level Parameters */}
                  {selectedReport.compartmentFields && selectedReport.compartmentFields.length > 0 && (
                    <div>
                      <Label className="text-base font-medium dark:text-purple-100">Compartment Level Parameters</Label>
                      <p className="text-xs text-gray-500 dark:text-purple-300 mb-2">Sensors at individual compartment level (Fill Level, Weight, Odour Detection, Lid Sensor)</p>
                      <div className="grid grid-cols-2 md:grid-cols-3 gap-2 mt-2">
                        {selectedReport.compartmentFields.map((field) => (
                          <motion.div
                            key={field}
                            className={`flex items-center space-x-2 p-2 rounded-lg cursor-pointer transition-colors ${
                              reportConfig.selectedCompartmentFields.includes(field)
                                ? 'bg-emerald-100 dark:bg-emerald-800/40'
                                : 'hover:bg-gray-50 dark:hover:bg-purple-900/20'
                            }`}
                            onClick={() => handleCompartmentFieldToggle(field, !reportConfig.selectedCompartmentFields.includes(field))}
                          >
                            <Checkbox
                              checked={reportConfig.selectedCompartmentFields.includes(field)}
                              onCheckedChange={(checked) => handleCompartmentFieldToggle(field, checked)}
                              className="data-[state=checked]:bg-green-600 data-[state=checked]:border-green-600"
                            />
                            <label className="text-sm text-gray-700 dark:text-purple-200 cursor-pointer capitalize">
                              {field.replace('_', ' ')}
                            </label>
                          </motion.div>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Waste Type Parameters (for Waste Quantity Analysis) */}
                  {selectedReport.wasteTypeFields && selectedReport.wasteTypeFields.length > 0 && (
                    <div>
                      <Label className="text-base font-medium dark:text-purple-100">Waste Type Parameters</Label>
                      <p className="text-xs text-gray-500 dark:text-purple-300 mb-2">Select waste categories to analyze</p>
                      <div className="grid grid-cols-2 md:grid-cols-3 gap-2 mt-2">
                        {selectedReport.wasteTypeFields.map((type) => (
                          <motion.div
                            key={type}
                            className={`flex items-center space-x-2 p-2 rounded-lg cursor-pointer transition-colors ${
                              reportConfig.selectedWasteTypes.includes(type)
                                ? 'bg-green-100 dark:bg-green-800/40'
                                : 'hover:bg-gray-50 dark:hover:bg-purple-900/20'
                            }`}
                            onClick={() => handleWasteTypeToggle(type, !reportConfig.selectedWasteTypes.includes(type))}
                          >
                            <Checkbox
                              checked={reportConfig.selectedWasteTypes.includes(type)}
                              onCheckedChange={(checked) => handleWasteTypeToggle(type, checked)}
                              className="data-[state=checked]:bg-green-600 data-[state=checked]:border-green-600"
                            />
                            <label className="text-sm text-gray-700 dark:text-purple-200 cursor-pointer capitalize">
                              {type.replace('_', ' ')}
                            </label>
                          </motion.div>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Format Selection */}
                  <div>
                    <Label className="text-base font-medium dark:text-purple-100">Export Format</Label>
                    <Select 
                      value={reportConfig.format} 
                      onValueChange={(value) => setReportConfig(prev => ({ ...prev, format: value }))}
                    >
                      <SelectTrigger className="w-40 dark:bg-[#1F0F2E] dark:border-purple-500 dark:text-purple-100">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="dark:bg-[#2A1F3D] dark:border-purple-600">
                        <SelectItem value="pdf" className="dark:text-purple-100">PDF Report</SelectItem>
                        <SelectItem value="excel" className="dark:text-purple-100">Excel Sheet</SelectItem>
                        <SelectItem value="csv" className="dark:text-purple-100">CSV Data</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </CardContent>
              </Card>

              {/* Generate Report */}
              <Card className="dark:bg-[#2A1F3D] dark:border-purple-600">
                <CardContent className="pt-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="font-semibold text-gray-900 dark:text-purple-100">Ready to Generate</h3>
                      <p className="text-sm text-gray-500 dark:text-purple-200">
                        {reportConfig.selectedBins.length} SmartBin(s) • {
                          reportConfig.selectedSmartBinFields.length + 
                          reportConfig.selectedCompartmentFields.length + 
                          reportConfig.selectedWasteTypes.length
                        } parameter(s) • {reportConfig.timeRange !== 'custom' ? timeRanges.find(r => r.value === reportConfig.timeRange)?.label : 'Custom range'}
                      </p>
                    </div>
                    <Button 
                      onClick={generateReport}
                      disabled={
                        reportConfig.selectedSmartBinFields.length === 0 && 
                        reportConfig.selectedCompartmentFields.length === 0 && 
                        reportConfig.selectedWasteTypes.length === 0
                      }
                      className="bg-purple-600 hover:bg-purple-700"
                    >
                      <Download className="w-4 h-4 mr-2" />
                      Generate Report
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          ) : (
            <Card className="dark:bg-[#2A1F3D] dark:border-purple-600">
              <CardContent className="flex flex-col items-center justify-center py-16">
                <FileText className="w-16 h-16 text-gray-400 mb-4" />
                <h3 className="text-lg font-semibold text-gray-900 dark:text-purple-100 mb-2">Select a Report Type</h3>
                <p className="text-gray-500 dark:text-purple-200 text-center">
                  Choose from the available report types to configure and generate your analytics
                </p>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
}